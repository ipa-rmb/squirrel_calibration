### checkerboard parameters
# side length of the chessboard squares
# double
chessboard_cell_size: 0.03

# Degrees of freedom of arm
# int
arm_dof: 6

# Degrees of freedom of camera
# int
camera_dof: 2

# number of checkerboard calibration points (in x- and y-direction), i.e. those points where 4 squares meet
chessboard_pattern_size: [10,6]

### initial values for transformation estimates
# insert the values as x, y, z, yaw (rot around z), pitch (rot around y'), roll (rot around x'')
# transform from base to first link of arm.
T_base_to_armbase_initial: [0, 0, 0, 0, 0, 0]


### checkerboard observation positions for capturing calibration images
# list of arm link configurations (angles per link in [rad]) for observing the checkerboard attached to robot's end effector
# includes <arm_dof> parameters per entry.
arm_configurations: []

# list of camera link configurations (angles per link in [rad]) for observing the checkerboard attached to robot's end effector
# includes <camera_dof> parameters per entry.
camera_configurations: []


# the robot base frame [the transformation between laser scanner and base should be accomplished before, the transform from base_frame to armbase_frame will be calibrated by this program]
# string
base_frame: "base_link"

# arm frame attached to robot base
# string
armbase_frame: "arm_base_link"

# checkerboard frame attached to arm (2nd upper left corner) [the transformation between armbase and checkerboard_frame should be available from tf]
# this transformation is created in the arm_base_calibration.launch file.
# string
checkerboard_frame: "checkerboard_frame"

# this is the camera coordinate system which refers to the color image sensor [the transformations between base_frame and camera_optical_frame should be available from tf]
# string
camera_optical_frame: "kinect_rgb_optical_frame"

# Image topic
# string
camera_image_topic: "/kinect/rgb/image_raw"

# topic names for commanding the pan tilt unit
# string
# pan controller
pan_controller_command: "/pan_tilt_controller/pan_joint_position_controller/command"

# tilt controller
tilt_controller_command: "/pan_tilt_controller/tilt_joint_position_controller/command"

# Topic to control the arm joints.
# string
arm_joint_controller_command: "/arm_controller/joint_trajectory_controller/command"

# pan state
# string
pan_joint_state_topic: "/pan_controller/state"

# tilt state
# string
tilt_joint_state_topic: "/tilt_controller/state"

pan, tilt states
# string
pan_tilt_states_topic: "/pan_tilt_controller/joint_states"

# Topic to retrieve the current arm state
# string
arm_state_command: "/arm_controller/joint_states"

# storage folder that holds the calibration output
# string
calibration_storage_path: "~/.ros/robotino_calibration/calibration"


### program sequence
# loads calibration images and transforms from disk if set to true, for offline calibration
# bool
load_images: false

# max allowed deviation a target angle is allowed to have in terms of the current joint angle [rad]
# double
max_angle_deviation: 3

# calibration interface ID. Decides which robot's interface to use: 0 - Robotino, 1 - RAW
# int
calibration_ID: 0
