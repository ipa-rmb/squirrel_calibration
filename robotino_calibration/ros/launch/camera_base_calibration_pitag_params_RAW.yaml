### initial values for transformation estimates
# insert the values as x, y, z, yaw (rot around z), pitch (rot around y), roll (rot around x)
# the transform from base_frame to torso_lower_frame
#T_base_to_torso_lower_initial: [0.166, 0.2175, 0.302, 1.57079632679, 0.0, 0.0]

# the transform from torso_upper_frame to camera_frame
#T_torso_upper_to_camera_initial: [0.025, -0.145, 0.051, 0.0, 1.57079632679, 0.0] #[-0.0323921, -0.14353, 0.051, 0.0, 1.57079632679, 0.39269908169] #[-0.0961665, -0.181019, 0.051, 0.0, 1.57079632679, 0.39269908169] #[-0.01957318079, -0.20404139431, 0.0, 0.0, 1.57079632679, 0.39269908169]


### Observation positions for capturing calibration images of the pitags
# if this flag is true, then the robot configurations will be sampled on a equally spaced grid from the given ranges, if false, the user-provided configurations in robot_configurations will be used
# bool
use_range: true

# ranges for the degrees of freedom of the robot
# each parameter is set as [min_value, step, max_value]
# double
x_range: [-2.2, 0.2, -1.6]       # in [m]
y_range: [1.0, 0.4, 1.4]       # in [m], fixed y-coordinate
phi_range: [0, 1.0, 0]         # in [rad], fixed phi-angle
pan_range: [-2.4, 0.4, -1.6]     # in [rad]
tilt_range: [0.4, 0.2, 0.8]    # in [rad]

# list of robot configurations for observing the pitags measured relative to the landmark_reference_nav coordinate system that is similarly aligned as the robot's base_link facing the marker
# includes 5 parameters per entry: robot pose: x, y, phi and torso: pan, tilt
robot_configurations: [-1.5, -0.17, 0, 0.15, 0.25,
                       -1.5, -0.17, 0, 0.0, 0.3,
                       -1.5, -0.17, 0, -0.15, 0.3,
                       -1.5, -0.17, 0, -0.3, 0.3,
                       -1.5, -0.17, 0, -0.5, 0.3,
                       -1.5, -0.17, 0, 0.15, 0.05,
                       -1.5, -0.17, 0, 0.0, 0.05,
                       -1.5, -0.17, 0, -0.15, 0.05,
                       -1.5, -0.17, 0, -0.3, 0.05,
                       -1.5, -0.17, 0, -0.5, 0.05,
                       -1.5, -0.17, 0, 0.15, -0.2,
                       -1.5, -0.17, 0, 0.0, -0.2,
                       -1.5, -0.17, 0, -0.15, -0.2,
                       -1.5, -0.17, 0, -0.35, -0.2,
                       -1.5, -0.17, 0, -0.5, -0.2,
                       -1.0, -0.17, 0, 0.0, 0.2,
                       -1.0, -0.17, 0, -0.2, 0.2,
                       -1.0, -0.17, 0, -0.45, 0.2,
                       -1.0, -0.17, 0, 0.0, 0.05,
                       -1.0, -0.17, 0, -0.2, 0.05,
                       -1.0, -0.17, 0, -0.45, 0.05,
                       -1.0, -0.17, 0, 0.0, -0.15,
                       -1.0, -0.17, 0, -0.2, -0.15,
                       -1.0, -0.17, 0, -0.45, -0.15,
                       -0.85, -0.17, 0, 0.0, 0.15,
                       -0.85, -0.17, 0, -0.15, 0.15,
                       -0.85, -0.17, 0, -0.35, 0.2,
                       -0.85, -0.17, 0, 0.0, 0.05,
                       -0.85, -0.17, 0, -0.15, 0.05,
                       -0.85, -0.17, 0, -0.35, 0.05,
                       -0.85, -0.17, 0, 0.0, -0.1,
                       -0.85, -0.17, 0, -0.15, -0.1,
                       -0.85, -0.17, 0, -0.35, -0.1]


### Robot link and topic names
# link names for the robot coordinate systems
# string
# fixed frame at lower torso end (i.e. this coordinate system should not turn if different pan angles are commanded)
torso_lower_frame: "torso_0_link"

# last link of torso chain [the transformations between torso_lower_frame and torso_upper_frame should be available from tf]
torso_upper_frame: "torso_knob_link" #"torso_base_link"

# camera frame with fixed transform to torso_upper_frame [transform from torso_upper_frame to camera will be calibrated by this program]
camera_frame: "ensenso_frame" #"torso_knob_link"

# this is the camera coordinate system which refers to the color image sensor [the transformations between camera_frame and camera_optical_frame should be available from tf]
camera_optical_frame: "ids_ueye_frame"

# the robot base frame [the transformation between laser scanner and base should be accomplished before, the transform from base_frame to torso_lower_frame will be calibrated by this program]
base_frame: "base_link"

# base name of all frames generated by cob_fiducials, each Pi tag number will be attached to this string.
marker_frame_base_name: "tag"

# The name of the reference frame. Has to match the entry found in the relative_localization yaml files.
# string
child_frame_name: "/landmark_reference_nav"


### commands needed to move the robot and camera
# Topic to control camera postion
camera_joint_controller_command: "/torso/joint_group_position_controller/command"

# joint states topic for camera unit
# string
camera_joint_state_topic: "/torso/joint_states" #/joint_states


## topic names for commanding the robot base
# topic name for the base controller
# string
base_controller_topic_name: "/base/twist_controller/command"


### Program sequence
# loads calibration images and transforms from disk if set to true
# bool
load_images: false

# number of optimization iterations
# int
optimization_iterations: 10000

# calibration interface ID. Decides which robot's interface to use: 0 - Robotino, 1 - RAW
# int
calibration_ID: 1

# storage folder that holds the calibration output
# string
calibration_storage_path: "raw_calibration/calibration"
